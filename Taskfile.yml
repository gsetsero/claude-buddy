version: '3'

vars:
  PROJECT_NAME: claude-buddy
  VERSION:
    sh: node -p "require('./package.json').version"
  NODE_VERSION:
    sh: node --version
  DIST_DIR: dist

env:
  NODE_ENV: development
  FORCE_COLOR: "1"

output: prefixed

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  setup:
    desc: Initialize project for development
    deps: [install]
    cmds:
      - echo "Claude Buddy development environment ready!"
      - echo "Version {{.VERSION}}"
      - echo "Node {{.NODE_VERSION}}"

  install:
    desc: Install project dependencies
    internal: true
    cmds:
      - npm ci
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/.package-lock.json

  dev:
    desc: Start development mode
    cmds:
      - echo "Starting Claude Buddy development environment..."
      - echo "Press Ctrl+C to stop"
      - |
        if command -v nodemon >/dev/null; then
          npx nodemon --watch src --ext js,ts,md,json \
            --exec "echo 'Files changed, ready for testing...'"
        else
          echo "Install nodemon for file watching: npm install -g nodemon"
        fi

  test:
    desc: Run all tests
    cmds:
      - echo "Testing installation process..."
      - node install.js --help
      - echo "All tests passed!"

  build:
    desc: Build for production
    deps: ["clean:build"]
    cmds:
      - echo "Building Claude Buddy..."
      - mkdir -p {{.DIST_DIR}}
      - cp install.js {{.DIST_DIR}}/
      - cp package.json {{.DIST_DIR}}/
      - cp README.md {{.DIST_DIR}}/
      - echo "Build completed in {{.DIST_DIR}}/"

  "clean:build":
    desc: Clean build directory
    internal: true
    cmds:
      - rm -rf {{.DIST_DIR}}

  lint:
    desc: Check and fix code style
    cmds:
      - echo "Linting code..."
      - |
        if command -v eslint >/dev/null || [ -f "node_modules/.bin/eslint" ]; then
          npx eslint . --ext .js,.ts --fix --quiet || echo "Linting issues found"
        else
          echo "ESLint not found. Install with: npm install -g eslint"
        fi

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.DIST_DIR}}
      - find . -name "*.log" -delete 2>/dev/null || true
      - echo "Build artifacts cleaned"

  analyze:
    desc: Analyze project structure
    cmds:
      - echo "Project Analysis Report"
      - echo "======================"
      - echo "Version {{.VERSION}}"
      - echo "Node {{.NODE_VERSION}}"
      - echo ""
      - echo "File Counts:"
      - echo "  JavaScript:" $(find . -name "*.js" | wc -l)
      - echo "  Markdown:" $(find . -name "*.md" | wc -l)
      - echo "  JSON:" $(find . -name "*.json" | wc -l)

  "security:audit":
    desc: Check for vulnerabilities
    cmds:
      - echo "Running security audit..."
      - npm audit --audit-level=moderate

  "version:patch":
    desc: Bump patch version
    cmds:
      - npm version patch --no-git-tag-version
      - |
        VERSION=$(node -p "require('./package.json').version")
        git add package.json
        git commit -m "chore: bump version to v$VERSION"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        echo "Tagged version v$VERSION"

  "publish:dry":
    desc: Test publish process
    deps: [build, test]
    cmds:
      - echo "Dry run publish..."
      - cd {{.DIST_DIR}} && npm publish --dry-run

  publish:
    desc: Publish to npm
    deps: [build, test]
    preconditions:
      - test -f {{.DIST_DIR}}/package.json
    prompt:
      - "Are you sure you want to publish {{.PROJECT_NAME}} v{{.VERSION}}?"
    cmds:
      - cd {{.DIST_DIR}} && npm publish
      - echo "Published {{.PROJECT_NAME}} v{{.VERSION}}!"

  help:
    desc: Show detailed help for common workflows
    cmds:
      - |
        echo "Claude Buddy Development Guide"
        echo "=============================="
        echo ""
        echo "Common Workflows:"
        echo "  task setup          - Initialize development environment"
        echo "  task dev            - Start development mode"
        echo "  task test           - Run all tests"
        echo "  task build          - Build for production"
        echo "  task lint           - Check and fix code style"
        echo ""
        echo "Utilities:"
        echo "  task clean          - Clean build artifacts"
        echo "  task analyze        - Analyze project structure"
        echo "  task security:audit - Check for vulnerabilities"
        echo ""
        echo "Publishing:"
        echo "  task version:patch  - Bump patch version"
        echo "  task publish:dry    - Test publish process"
        echo "  task publish        - Publish to npm"
        echo ""
        echo "For full task list: task --list"